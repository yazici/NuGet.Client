<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml.XDocument" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#

 string InitCaps(string input)
 {
    string output = input.Substring(0,1).ToUpper() + input.Substring(1);
    return output;
 }
 bool IsArgument(string type)
 {
    return type == "Argument";
 }
 string GetProperty(XElement element)
 {
    switch  (element.Name.LocalName)
    {
        case "SingleValueOption":
            return "Option";
        case "SwitchOption":
            return "Option";
        case "Argument":
            return "Argument";
        default:
            return "Unknown Element Type" + element.Name.LocalName;
    }
 }
 string GetOptionType(XElement element)
 {
    switch (element.Name.LocalName)
    {
        case "SingleValueOption":
            return "SingleValue";
        case "SwitchOption":
            return "NoValue";
        default:
            return "Unknown Element Type" + element.Name.LocalName;
    }
 }

var commandFile = this.Host.ResolvePath("..\\..\\NuGet.CommandLine.XPlat\\Commands\\Commands.xml");
var commands = XDocument.Load(commandFile);
#>
using System;
using System.Threading.Tasks;
using NuGet.Common;


namespace NuGet.Commands
{

<#
    // CommandArgs class
     foreach (var command in commands.Descendants(XName.Get("Command","")))
     {
        var commandName2 = command.Attribute(XName.Get("Name", "")).Value;
        var commandFormalName2 = InitCaps(commandName2);
#>
    internal partial class <#= commandFormalName2 #>FArgs
    {
<#
        foreach (var option in command.Descendants())
        {
            var optionName = option.Attribute(XName.Get("Name", "")).Value;
            var optionFormalName = InitCaps(optionName.Replace("-",""));
            if (IsArgument(GetProperty(option)))
            {
#>
        internal string <#= optionFormalName #> { get; set; }
<#
            }
            else
            {
                switch (GetOptionType(option))
                {
                case "SingleValue":
#>
        internal string <#= optionFormalName #> { get; set; }
<#
                    break;
                case "NoValue":
#>
        internal bool <#= optionFormalName #> { get; set; }
<#
                    break;
                }
            }
        }
#>
    }
<#
    }
#>
}
