<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Xml.XDocument" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#

 string InitCaps(string input)
 {
    string output = input.Substring(0,1).ToUpper() + input.Substring(1);
    return output;
 }
 bool IsArgument(string type)
 {
    return type == "Argument";
 }
 string GetProperty(XElement element)
 {
    switch  (element.Name.LocalName)
    {
        case "SingleValueOption":
            return "Option";
        case "SwitchOption":
            return "Option";
        case "Argument":
            return "Argument";
        default:
            return "Unknown Element Type" + element.Name.LocalName;
    }
 }
 string GetOptionType(XElement element)
 {
    switch (element.Name.LocalName)
    {
        case "SingleValueOption":
            return "SingleValue";
        case "SwitchOption":
            return "NoValue";
        case "Value":
            return "Value";
        default:
            return "Unknown Element Type" + element.Name.LocalName;
    }
 }

 var commandFile = this.Host.ResolvePath("..\\..\\NuGet.CommandLine.XPlat\\Commands\\Commands.xml");
  var commands = XDocument.Load(commandFile);
#>
using System;
using System.Threading.Tasks;
using NuGet.Common;


namespace NuGet.Commands
{

<#
    // VerbNounArgs class
     foreach (var verb in commands.Descendants(XName.Get("Verb","")))
     {
        var verbName = verb.Attribute(XName.Get("Name", "")).Value;
        var verbFormalName = InitCaps(verbName);
        foreach (var noun in verb.Descendants(XName.Get("Noun")))
        {
            var nounName = noun.Attribute(XName.Get("Name", ""))?.Value;
            var nounFormalName = InitCaps(nounName);
#>
    public partial class <#= verbFormalName #><#= nounFormalName #>Args
    {
<#
            foreach (var option in noun.Descendants())
            {
                var optionName = option.Attribute(XName.Get("Name", "")).Value;
                var optionType = option.Attribute(XName.Get("Type", ""))?.Value;
                var optionFormalName = InitCaps(optionName.Replace("-",""));
                if (IsArgument(GetProperty(option)))
                {
#>
        public string <#= optionFormalName #> { get; set; }
<#
                }
                else
                {
                    switch (GetOptionType(option))
                    {
                    case "SingleValue":
#>
        public string <#= optionFormalName #> { get; set; }
<#
                        break;
                    case "NoValue":
#>
        public bool <#= optionFormalName #> { get; set; }
<#
                        break;
                    case "Value":
#>
        public <#= optionType #> <#= optionFormalName #> { get; set; }
<#
                        break;
                    }
                }
            }
#>
    }

<#
        }
    }
#>
}
